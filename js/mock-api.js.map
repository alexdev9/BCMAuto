{"version":3,"file":"mock-api.js","sourceRoot":"","sources":["../../src/mock-api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Car, ContactRequest } from './types';\r\nimport { \r\n    bmwM3, \r\n    teslaModelS, \r\n    porsche911, \r\n    audiRsEtronGt,\r\n    mercedesAmgGt,\r\n    lamborghiniHuracan,\r\n    ferrariF8,\r\n    maseratiMc20,\r\n    mclaren720s,\r\n    astonMartinDb11,\r\n    bentleyContinentalGt,\r\n    rollsRoyceWraith\r\n} from './data';\r\n\r\n// Mock data\r\nconst mockCars: Car[] = [\r\n    bmwM3, \r\n    teslaModelS, \r\n    porsche911, \r\n    audiRsEtronGt,\r\n    mercedesAmgGt,\r\n    lamborghiniHuracan,\r\n    ferrariF8,\r\n    maseratiMc20,\r\n    mclaren720s,\r\n    astonMartinDb11,\r\n    bentleyContinentalGt,\r\n    rollsRoyceWraith\r\n];\r\nconst mockContactRequests: ContactRequest[] = [];\r\n\r\n// Simulated API delay\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\ntype SortField = 'price' | 'year' | 'mileage';\r\ntype SortDirection = 'asc' | 'desc';\r\n\r\ninterface GetCarsParams {\r\n    page?: number;\r\n    limit?: number;\r\n    search?: string;\r\n    // Filter params\r\n    make?: string;\r\n    model?: string;\r\n    minYear?: number;\r\n    maxYear?: number;\r\n    minPrice?: number;\r\n    maxPrice?: number;\r\n    transmission?: 'automatic' | 'manual';\r\n    fuelType?: 'petrol' | 'diesel' | 'electric' | 'hybrid';\r\n    bodyType?: string;\r\n    // Sort params\r\n    sortBy?: SortField;\r\n    sortDirection?: SortDirection;\r\n}\r\n\r\ninterface PaginatedResponse<T> {\r\n    data: T[];\r\n    total: number;\r\n    page: number;\r\n    totalPages: number;\r\n}\r\n\r\n// Mock API service\r\nexport const api = {\r\n    // Car operations\r\n    getCars: async (params: GetCarsParams = {}): Promise<PaginatedResponse<Car>> => {\r\n        const {\r\n            page = 1,\r\n            limit = 6,\r\n            search = '',\r\n            make,\r\n            model,\r\n            minYear,\r\n            maxYear,\r\n            minPrice,\r\n            maxPrice,\r\n            transmission,\r\n            fuelType,\r\n            bodyType,\r\n            sortBy,\r\n            sortDirection = 'asc'\r\n        } = params;\r\n\r\n        await delay(300); // Reduced delay for better responsiveness\r\n\r\n        // Filter cars based on all criteria\r\n        let filteredCars = [...mockCars];\r\n\r\n        // Text search\r\n        if (search) {\r\n            const searchLower = search.toLowerCase();\r\n            filteredCars = filteredCars.filter(car => \r\n                car.make.toLowerCase().includes(searchLower) ||\r\n                car.model.toLowerCase().includes(searchLower) ||\r\n                car.bodyType.toLowerCase().includes(searchLower) ||\r\n                car.fuelType.toLowerCase().includes(searchLower) ||\r\n                car.year.toString().includes(searchLower)\r\n            );\r\n        }\r\n\r\n        // Apply specific filters\r\n        if (make) {\r\n            filteredCars = filteredCars.filter(car => \r\n                car.make.toLowerCase() === make.toLowerCase()\r\n            );\r\n        }\r\n        if (model) {\r\n            filteredCars = filteredCars.filter(car => \r\n                car.model.toLowerCase() === model.toLowerCase()\r\n            );\r\n        }\r\n        if (minYear) {\r\n            filteredCars = filteredCars.filter(car => car.year >= minYear);\r\n        }\r\n        if (maxYear) {\r\n            filteredCars = filteredCars.filter(car => car.year <= maxYear);\r\n        }\r\n        if (minPrice) {\r\n            filteredCars = filteredCars.filter(car => car.price >= minPrice);\r\n        }\r\n        if (maxPrice) {\r\n            filteredCars = filteredCars.filter(car => car.price <= maxPrice);\r\n        }\r\n        if (transmission) {\r\n            filteredCars = filteredCars.filter(car => \r\n                car.transmission === transmission\r\n            );\r\n        }\r\n        if (fuelType) {\r\n            filteredCars = filteredCars.filter(car => \r\n                car.fuelType === fuelType\r\n            );\r\n        }\r\n        if (bodyType) {\r\n            filteredCars = filteredCars.filter(car => \r\n                car.bodyType.toLowerCase() === bodyType.toLowerCase()\r\n            );\r\n        }\r\n\r\n        // Apply sorting\r\n        if (sortBy) {\r\n            filteredCars.sort((a, b) => {\r\n                const aValue = a[sortBy];\r\n                const bValue = b[sortBy];\r\n                const multiplier = sortDirection === 'asc' ? 1 : -1;\r\n                \r\n                if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n                    return (aValue - bValue) * multiplier;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        // Calculate pagination\r\n        const total = filteredCars.length;\r\n        const totalPages = Math.ceil(total / limit);\r\n        const startIndex = (page - 1) * limit;\r\n        const endIndex = startIndex + limit;\r\n\r\n        // Get paginated results\r\n        const paginatedCars = filteredCars.slice(startIndex, endIndex);\r\n\r\n        return {\r\n            data: paginatedCars,\r\n            total,\r\n            page,\r\n            totalPages\r\n        };\r\n    },\r\n\r\n    addCar: async (car: Omit<Car, 'id'>): Promise<Car> => {\r\n        await delay(300);\r\n        const newCar: Car = {\r\n            ...car,\r\n            id: crypto.randomUUID()\r\n        };\r\n        mockCars.push(newCar);\r\n        return newCar;\r\n    },\r\n\r\n    deleteCar: async (id: string): Promise<boolean> => {\r\n        await delay(300);\r\n        const initialLength = mockCars.length;\r\n        const index = mockCars.findIndex(car => car.id === id);\r\n        if (index !== -1) {\r\n            mockCars.splice(index, 1);\r\n        }\r\n        return initialLength > mockCars.length;\r\n    },\r\n\r\n    // Contact request operations\r\n    submitContactRequest: async (request: Omit<ContactRequest, 'timestamp'>): Promise<ContactRequest> => {\r\n        await delay(300);\r\n        const newRequest: ContactRequest = {\r\n            ...request,\r\n            timestamp: new Date()\r\n        };\r\n        mockContactRequests.push(newRequest);\r\n        return newRequest;\r\n    },\r\n\r\n    getContactRequests: async (): Promise<ContactRequest[]> => {\r\n        await delay(300);\r\n        return [...mockContactRequests];\r\n    }\r\n};"]}